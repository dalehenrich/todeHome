TDTxtLeafNode{#name:'report',#contents:Text{#string:'We allow an equality index to contain a mixture of String and Unicode
objects, which can lead to failed lookups in the Btree
for an equality index. Specifically the < and > methods may produce
different results for a String, Unicode7 pair depending on which
class is the receiver . Unicode receivers will use the current
IcuCollator default to do the compare.

For example, a mix of String and Unicode7 observed in the kermit repository.
Likewise DoubleByteString and Unicode16 is a problem.

Should we specifically exclude Unicode strings from being added
to an index in 3.1.0.x ?
------------------------------
dkh 12/29/2013 17:59
------------------------------
- implement #asString for Unicode classes to convert to native String instance.
- make sure that Symbol, DoubleByteSymbol, and QuadByteSymbol instances fail
  comparison when using collator ... no Unicode symbols so this is the correct
  behavior...also fail for any non-CharacterCollection classes ...

dkh 12/30/2013 10:18
------------------------------
  - 43601  P2  String/Unicode compare needs to coerce to Unicode

    this bug means that native strings should be coerced to Unicode when compared 
    to Unicode strings ... currently I\'ve implemented the reverse ... the other 
    implication is that we cannot allow a mixed collection of strings to be indexed
    as an equality index with a CharacterCollection last element class (i.e., 
    exclude Unicode instances in these cases ... which is the original intent of 
    the bug).

dkh 12/30/2013 12:23
------------------------------
Removed all of the added _idxFor* methods in Unicode classes ... bugfix for 
43601 should make the standard _idxFor* CharacterCollection methods work ...

',#runs:RunArray{#runs:[1718],#values:[[TextColor{#color:Color{#rgb:0}}]],#lastIndex:1641,#lastRun:1,#lastOffset:1640}},#creationTime:DateAndTime['2013-12-24T07:42:36.19235610961914-08:00'],#modificationTime:DateAndTime['2013-12-30T12:24:04.0611469745636-08:00']}