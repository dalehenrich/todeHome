
expectvalue %String
doit
(Object subclass: 'Bug42807'
  instVarNames: #()
  classVars: #()
  classInstVars: #()
  poolDictionaries: #()
  inDictionary: UserGlobals
  options: #()
) definition.
%

! Remove existing behavior from Bug42807
removeallmethods Bug42807
removeallclassmethods Bug42807
! ------------------- Class methods for Bug42807
category: 'as yet unclassified'
set compile_env: 0
classmethod: Bug42807
lit_array
  ^ #($x)
%
category: 'as yet unclassified'
set compile_env: 0
classmethod: Bug42807
lit_boolean
  ^ true
%
category: 'as yet unclassified'
set compile_env: 0
classmethod: Bug42807
lit_char
  ^ $b
%
category: 'as yet unclassified'
set compile_env: 0
classmethod: Bug42807
lit_float
  ^ 1.114
%
category: 'as yet unclassified'
set compile_env: 0
classmethod: Bug42807
lit_integer
  ^ 1
%
category: 'as yet unclassified'
set compile_env: 0
classmethod: Bug42807
lit_integer2
  ^ 16raef
%
category: 'as yet unclassified'
set compile_env: 0
classmethod: Bug42807
lit_integer3
  ^ 2799	"16raef"
%
category: 'as yet unclassified'
set compile_env: 0
classmethod: Bug42807
lit_string
  ^ 'abc'
%
category: 'as yet unclassified'
set compile_env: 0
classmethod: Bug42807
lit_symbol
  ^ #'abc'
%
! ------------------- Instance methods for Bug42807
category: 'as yet unclassified'
set compile_env: 0
method: Bug42807
lit_array
  ^ #($x)
%
category: 'as yet unclassified'
set compile_env: 0
method: Bug42807
lit_boolean
  | result |
  result := true.
  1 = 2
    ifTrue: [ result := false ].
  ^ result
%
category: 'as yet unclassified'
set compile_env: 0
method: Bug42807
lit_char
  ^ $b
%
category: 'as yet unclassified'
set compile_env: 0
method: Bug42807
lit_float
  ^ 1.114
%
category: 'as yet unclassified'
set compile_env: 0
method: Bug42807
lit_integer
  ^ 1
%
category: 'as yet unclassified'
set compile_env: 0
method: Bug42807
lit_integer2
  ^ 16raef
%
category: 'as yet unclassified'
set compile_env: 0
method: Bug42807
lit_integer3
  ^ 2799	"16raef"
%
category: 'as yet unclassified'
set compile_env: 0
method: Bug42807
lit_string
  ^ 'abc'
%
category: 'as yet unclassified'
set compile_env: 0
method: Bug42807
lit_symbol
  ^ #'abc'
%
expectValue %Boolean
doit
Bug42807 category: 'Bug42807'.
true
%
! ------------------- Test script 
run
    | bugClass classOrganizer classSet instance literal references  passed failures |
    bugClass := Bug42807.
    classOrganizer := ClassOrganizer new.
    classSet := ClassSet new.
    classSet add: bugClass.
    instance := bugClass new.
        failures := {}.
        passed := 0.
        bugClass selectors
          do: [ :selector | 
            literal := instance perform: selector.
            references := classOrganizer
              referencesToLiteral: literal
              in: classSet.
            (references at: 1) size >= 2
              ifTrue: [ passed := passed + 1 ]
              ifFalse: [ failures add: 'FAILED' -> selector ] ].
        {('passed: ' , passed printString , ' failures: '
          , (bugClass selectors size - passed) printString).
        failures} 
%