TDTxtLeafNode{#name:'why',#contents:Text{#string:'dkh 1/3/2014 13:49
------------------
Why is the _oldRemoveAllIndexes code faster than removeAllIndexes?

 - _oldRemoveAllIndexes traverses each element in the collection 
   and removes the pathTerm for that index from the dependencyList
   for the object by calling DependencyList>>removeCompletelyPathTerm:for:. 
   If the pathTerm is the only pathTerm in the depList, then
   DependencyList class>>set:for: is called to clear dependency for anObject...
   this is REAL CHEAP. Then all of the pathTerms are collected and the depLists
   containing the pathTerms are removed from the SharedDependencyLists. This is
   also real cheap.
 - removeAllIndexes cost (over and above _oldRemoveAllIndexes) comes from keeping
   track of the sharedDepLists and removing a depList each time one is encountered.
   It\'s cheaper to manage the list of sharedDepLists than it is to recalculate
   new dependencyLists for each object in the collection when there is more than 
   one entry in the dependencyLists and this happens when there is more than one
   index on the nsc (I believe)

dkh 1/3/2014 14:20
------------------
Current hypothesis is that the expense of _oldRemoveAllIndexes will sky rocket when all of the elements in a collection have more than one entry in the dependencyList.
',#runs:RunArray{#runs:[18,249,411,57,14,328,81,20,106],#values:[[TextColor{#color:Color{#rgb:0}}],[],[TextColor{#color:@8}],[],[TextColor{#color:Color{#rgb:512}}],@12,[@7],@9,[@7]],#lastIndex:nil,#lastRun:nil,#lastOffset:nil}},#creationTime:DateAndTime['2014-01-03T13:49:31.45405197143555-08:00'],#modificationTime:DateAndTime['2014-01-03T14:21:54.12821292877197-08:00']}