TDSmalltalkLeafNode{#name:'populateSeaside31',#contents:'| constructor packageNames repositories methodSections gofer methodSectionMap attributes orderedAttributes |\npackageNames := Set new.\nrepositories := Set new.\nmethodSections := #().\nattributes := Set new.\n#(\'3.1.0-baseline\' \'3.1.0\')\n  do: [ :sourceVersionString | \n    constructor := MetacelloToolBoxConstructor new.\n    constructor configuration: ConfigurationOfSeaside3 new.\n    constructor extractMethodSectionsFor: sourceVersionString.\n    constructor methodSections\n      do: [ :section | attributes addAll: section attributes ].\n    methodSections := methodSections , constructor methodSections ].\nmethodSectionMap := Dictionary new.\nmethodSections\n  do: [ :methodSection | \n    | coll |\n    coll := methodSectionMap\n      at: methodSection attributePath\n      ifAbsent: [ methodSectionMap at: methodSection attributePath put: OrderedCollection new ].\n    coll add: methodSection ].\norderedAttributes := #(#\'common\' #\'squeakCommon\' #\'gemstone\' #\'pharo\' #\'squeak\' #\'pharo1.x\' #\'pharo1.3.x\' #\'pharo1.4.x\' #\'pharo2.x\' #\'pharo3.x\' #\'gs2.4.x\' #\'gs3.x\' #\'gs3.1.x\' #\'gs3.2.x\').\nattributes\n  do: [ :attribute | \n    (orderedAttributes includes: attribute)\n      ifFalse: [ attribute error: attribute printString , \' missing from orderedAttributes\' ] ].\norderedAttributes\n  do: [ :attribute | \n    | sections |\n    sections := methodSectionMap\n      at: attribute asMetacelloAttributePath\n      ifAbsent: [ #() ].\n    sections\n      do: [ :methodSection | \n        | versionSpec repos |\n        versionSpec := methodSection versionSpec.\n        repos := versionSpec repositorySpecs\n          collect: [ :repoSpec | repoSpec createRepository ].\n        repositories addAll: repos.\n        versionSpec packages\n          specListDo: [ :packageSpec | \n            packageSpec getFile\n              ifNotNil: [ :file | \n                file isEmpty\n                  ifTrue: [ nil halt ].\n                packageNames add: file ].\n            repos := packageSpec repositorySpecs\n              collect: [ :repoSpec | repoSpec createRepository ].\n            repositories addAll: repos ] ] ].\ngofer := Gofer new.\nrepositories do: [ :repo | gofer repository: repo ].\npackageNames do: [ :packageName | gofer version: packageName ].\ngofer fetch.\ngofer := Gofer new.\npackageNames do: [ :packageName | gofer version: packageName ].\ngofer\n  repository:\n    (TDMonticelloTool new\n      repositoryFromDescription: \'filetree:///opt/git/Seaside31/repository\').\ngofer push',#creationTime:DateAndTime['2013-12-06T17:02:01.3065230846405-08:00'],#modificationTime:@2}