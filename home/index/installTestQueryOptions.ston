TDScriptLeafNode{#name:'installTestQueryOptions',#contents:'[ :topez :objIn :tokens :command | \n| opts args restore init stoneNRS netldiName expression verbose |\n\"for help: ./installTestQueryOptions -h\"\ncommand\n  getOptsMixedLongShort:\n    {#(\'help\' $h #\'none\').\n    #(\'init\' $i #\'none\').\n    #(\'restore\' $r #\'none\').\n    #(\'noRestrictedClasses\' $n #\'none\').\n    #(\'netldi\' nil #\'required\').\n    #(\'verbose\' $v #\'none\')}\n  optionsAndArguments: [ :options :operands | \n    opts := options.\n    args := operands ].\nstoneNRS := GsNetworkResourceString defaultStoneNRSFromCurrent.\nopts\n  at: \'verbose\'\n  ifAbsent: [ verbose := false ]\n  ifPresent: [ :ignored | verbose := true ].\nopts\n  at: \'netldi\'\n  ifAbsent: [ \n    | stoneName |\n    stoneName := stoneNRS body.\n    (stoneName beginsWith: \'j_\')\n      ifTrue: [ netldiName := \'j_gs64ldi\' ].\n    (stoneName beginsWith: \'k_\')\n      ifTrue: [ netldiName := \'k_gs64ldi\' ].\n    (stoneName beginsWith: \'l_\')\n      ifTrue: [ netldiName := \'l_gs64ldi\' ] ]\n  ifPresent: [ :optValue | netldiName := optValue ].\nverbose\n  ifTrue: [ \n    Transcript\n      cr;\n      show: \'netldi=\' , netldiName printString ].\nexpression := \'GsQuery defaultQueryOptions: (GsQueryOptions new\n    setApplyDeMorgansLaws;\n    setConsolidateEnumerablePredicates;\n    setConsolidateRangePredicates;\n    setNormalizePredicates;\n    setRemoveRedundantPredicates;\n    setReorderPredicates;\n    setTransformCommonPaths).\nSystem commit\'.\nopts at: \'init\' ifPresent: [ :optValue | expression := \'GsQueryFormula\n    negatedOperatorMap;\n    inverseOperatorMap;\n    comparisonSelectorMap.\nSystem commit\' ].\nopts\n  at: \'noRestrictedClasses\'\n  ifPresent: [ :optValue | expression := \'| cls index set |\ncls := GsPackagePolicy.\nindex := cls class allInstVarNames indexOfIdentical: #\'\'restrictedClasses\'\'.\nset := cls instVarAt: index.\nset removeAll: set.\nSystem commit\' ].\nopts\n  at: \'restore\'\n  ifPresent: [ :optValue | \n    expression := \'GsQuery defaultQueryOptions: (GsQueryOptions default ).\nSystem commit\' ].\nopts\n  at: \'help\'\n  ifAbsent: [ \n    | systemUser gemNRS |\n    verbose\n      ifTrue: [ \n        Transcript\n          cr;\n          show: \'exspression=\' , expression printString ].\n    gemNRS := GsNetworkResourceString new\n      protocol: \'tcp\';\n      node: \'foos\';\n      netldi: netldiName;\n      resource: \'task\';\n      body: \'gemnetobject\';\n      yourself.\n    systemUser := GsExternalSession new\n      stoneNRS: stoneNRS;\n      gemNRS: gemNRS;\n      username: \'SystemUser\';\n      password: \'swordfish\';\n      yourself.\n    [ \n    systemUser login.\n    systemUser executeString: expression ]\n      ensure: [ systemUser ifNotNil: [ systemUser logout ] ] ]\n  ifPresent: [ :ignored | \n    TDManPage\n      viewManPage:\n        \'NAME\n  installTestQueryOptions - installTestQueryOptions utility\nSYNOPSIS\n  installTestQueryOptions [-h|--help] [--init] [--restore] [--netldi=<netldi-name>]\n\t\t                   [--noRestrictedClasses][-v|--verbose]\nDESCRIPTION\n  Since SystemUser owns the GsQuery class>>defaultQueryOptions: slot, the default\n  values cannot be easily changed for tests. This utility uses GsExternalSession\n  to login as SystemUser and change the option settings.\n\n  With no options set, this utility defines the GsQuery class>>defaultQueryOptions:\n  as follows:\n\n    GsQuery defaultQueryOptions: (GsQueryOptions new\n      setApplyDeMorgansLaws;\n      setConsolidateEnumerablePredicates;\n      setConsolidateRangePredicates;\n      setNormalizePredicates;\n      setRemoveRedundantPredicates;\n      setReorderPredicates;\n      setTransformCommonPaths).\n\n  With the restore option set, this utility restores the standard defaults:\n\n    GsQuery defaultQueryOptions: (GsQueryOptions default ).\n\n  With the init option set, the GsQueryFormula class is initialized:\n\n    GsQueryFormula\n      negatedOperatorMap;\n      inverseOperatorMap;\n      comparisonSelectorMap.\n\n  The verbose option logs detailed information to the Transcript.\nEXAMPLES\n\n  ./installTestQueryOptions\n  ./installTestQueryOptions --noRestrictedClasses\n\'\n      topez: topez ] ]',#creationTime:DateAndTime['2013-12-06T17:02:00.45641207695007-08:00'],#modificationTime:@2}