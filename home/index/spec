New Indexing Features for GemStone Smalltalk 64bit v3.2
                                                          [Dale Henrichs: v0.11]

-------------------------------------------------------------------------------
OVERVIEW
-------------------------------------------------------------------------------

Modification Tracking
------------------------

  To implement many of the indexing features it is necessary to validate that
  modification tracking is functional for all objects, so I think it is about
  time to add test coverage for modification tracking independent of the 
  indexing subsystem and explicitly document any exceptions. In a nutshell this
  involves ensuring that we have proper support for modification tracking 
  (i.e., add test coverage and correct deficiencies) for:

    - dynamic instance variables,
    - named and indexable portion of all pointer and byte objects
    - all subclasses of UnorderedCollections
    - all subclasses of SequencableCollections
    - all subclasses of ByteArray

  After a brief review of the C code, Allen has determined that the vast 
  majority of cases are already covered for modification tracking, with the 
  most notable exceptions being a handful of special purpose Array 
  primitives. 

  I have a basic modification test suite tucked away somewhere that can be 
  used as the basis for the initial set of tests.

New Index Creation API
------------------------

  The class GsIndexSpec maintains a collection of instances of subclasses 
  of AbstractIndexSpecifications. The instances of AbstractIndexSpecification
  are created using GsIndexSpec methods, not directly. 

  To create an index on an nsc, one first creates an instance of GsIndexSpec 
  with one or more index specifications:

    spec := GsIndexSpec new
      equalityIndex: 'each.age' lastElementClass: SmallInteger;
      equalityIndex: 'each.father.firstName' lastElementClass: String;
      yourself.

  Note that the reserved variable "each" is now allowed and recommended for
  use in an index path. Using the old API, it was correct to create an 
  index on empty string, ''. Using the new API, the equivalent would be 
  'each'.

  One then uses the spec to create the indexes on an nsc:

    spec createIndexesOn: nsc.

  The spec is not associated with any specific nsc, so an index spec can be 
  used to create indexes on a number of collections:

    spec createIndexesOn: nsc.
    spec createIndexesOn: anotherNsc.

  The spec may be used to remove a set of indexes from a collection:

    spec removeIndexesFrom: nsc.

  One can get also get an index spec for an nsc with the #indexSpec message:

    spec := nsc indexSpec.

  Printing an index spec for an nsc provides a useful "index report":

    'GsIndexSpec new
      equalityIndex: ''each.age'' lastElementClass: SmallInteger;
      equalityIndex: ''each.father.firstName'' lastElementClass: String;
      yourself'

  You can also use the index spec for rebuilding indexes:

    spec := nsc indexSpec.
    nsc removeAllIndexes.
    spec createIndexesOn: nsc.
    
  Here is the full list of index creation messages in GsIndexSpec:

    equalityIndex:lastElementClass:
    equalityIndex:lastElementClass:options:
    identityIndex:
    identityIndex:options:
    unicodeIndex:collator:
    unicodeIndex:collator:options:

Index Creation Options
------------------------

There are three different independent options available:

  reducedConflict
  requirePathTerms
  requireUnicodeStrings (meaningful for unicode indexes only)

Any combination of the above options may be specified as  
arguments to the options keyword. Use the #+ message to
combine multiple options:

  GsIndexOptions requirePathTerms + GsIndexOptions reducedConflict
 
Creating a reduced conflict index:

 GsIndexSpec new
  equalityIndex: 'each.sons.*.numberOfChildren'
    lastElementClass: SmallInteger
    options: GsIndexOptions reducedConflict;
  unicodeIndex: 'each.lastName'
    collator: (IcuCollator forLocaleNamed: 'en_GB')
    options: GsIndexOptions reducedConflict;
  yourself.

Examples of the other options:

 GsIndexSpec new
  equalityIndex: 'each.sons.*.numberOfChildren'
    lastElementClass: SmallInteger
    options: GsIndexOptions requirePathTerms +
               GsIndexOptions reducedConflict;
  unicodeIndex: 'each.lastName'
    collator: (IcuCollator forLocaleNamed: 'en_GB')
    options:
      GsIndexOptions requirePathTerms +
        GsIndexOptions requireUnicodeStrings;
  yourself

New Query API
------------------------

  The class GsQuery is used for defining and executing queries.
  The instance of GsQuery includes a formula, which is an instance of 
  GsQueryFormula, which can be re-used in other queries.  
  A GsQueryFormula combines predicates using operators.

  The following expression:

    (GsQuery fromString: 'each.age <= 18') executeOn: nsc.

  is equivalent to the following old-style select block expression:

    nsc select: {:each | each.age <= 18}.

  Multiple predicates are supported:

    GsQuery fromString: '(each.age <= 18) & (each.firstName = ''Dale'')'.

  The OR operator ($|) is supported, so queries like the following can be 
  executed:

    GsQuery fromString: 
      '(each.firstName = ''Dale'') & ((each.age <= 18) | (each.age > 55))'.

  The #not message is also supported. In the simple case one may write 
  queries of the form:

    GsQuery fromString: 
      '(each.firstName = ''Dale'') not'.

  The system will transform queries containing #not to an equivalent form 
  of the query without the #not, using De Morgan's Laws, so that optimized 
  queries may still be performed in the presence of a #not. In the above 
  simple case the query is transformed to: 

    GsQuery fromString: 
      '(each.firstName ~= ''Dale'')'.

  A slightly more complex query:

     GsQuery fromString: 
      '(each.firstName = ''Dale'') & ((each.age <= 18) | (each.age > 55)) not'.

  would be transformed to the following:

     GsQuery fromString: 
      '(each.firstName ~= ''Dale'') | ((each.age > 18) & (each.age <= 55))'.
 
  and so on.

  One may directly write range queries of the form:

    GsQuery fromString: '18 <= each.age < 50'.

  If one happens to write an `invalid` range query:

    GsQuery fromString: '18 > each.age < 50'.

  The system correctly recognizes that fact and the query is converted to a 
  valid form.

    GsQuery fromString: '(18 > each.age) & (each.age < 50)'.

  This conversion occurs during GsQuery creation, before the optimize step.

  Query Variables
  ---------------

  One may write queries using variables, so the above query could have been
  written as:

    GsQuery fromString: 'min <= each.age < max'.

  Variable values are bound to the query variables using the #bind:to: 
  message:

    (GsQuery fromString: 'min <= each.age < max')
      bind: 'min' to: 18;
      bind: 'max' to: 50;
      executeOn: nsc.

  Basic Query Functions
  ---------------------

  #executeOn: causes a query result to be calculated for the given `nsc`.
  #executeOn: is a convenience method for the following standard sequence:

    (GsQuery fromString: '(each.firstName ~= ''Dale'')')
      on: nsc;
      optimize;
      execute.

  The #on: message binds an `nsc` to the query and evaluators are bound to
  each predicate in the query formula. After binding an `nsc`, the message 
  #hasIndexEvaluators can be used to determine if each of the predicates
  is using an index on the nsc.

  The #optimize message performs a number of optimizations on the query 
  formula. A query may be sent the #optimize message before being bound to 
  an nsc using the #on: message, however some optimizations cannot be 
  performed without an bound nsc. Similarly, a query may be sent the #
  optimize message before variable values are bound, but some 
  optimizations may not be performed.

  Here's a list of the optimizations performed:

    - convert clauses modified by `not` using De Morgan's Laws

          (each.firstName = 'Dale') not

        becomes:

          (each.firstName ~= 'Dale')

    - convert predicates with common path-path operands to an equivalent
      constant predicate

          (each.firstName = each.firstName) 

        becomes:

          (true)

    - replace constant-path predicates with equivalent path-constant 
      predicates

          (19 > each.age) 

        becomes:

          (each.age < 19)

    - eliminate redundant predicates. i.e., predicates that fall within range
      of other predicates

          (each.age < 19) & (each.age < 4)

        becomes:

          (each.age < 4)

        Note that elimination of redundant predicates requires that any 
        variables in the query be bound to values.

    - convert 2 path-constant predicates into a range predicate when possible

          (each.age > 4) & (each.age < 19)

        becomes:

          (4 < each.age < 19)

        Note that elimination of redundant predicates requires that any 
        variables in the query be bound to values.

    - reorder predicates based on following ordering rules:
        constant predicates
        indexed predicates
        identity comparison predicates
        equality comparison predicates
        all others

          (each.age <= 21) & (each.gender == #male) & 
          (each.name = 'Dale') & (each.father = each.father)

        assuming each.name is indexed and each.age is not indexed, becomes:

          (true) & (each.name = 'Dale') & 
          (each.gender == #male) & (each.age <= 21)

        Note that some of the reordering optimizations require an nsc and 
        any variables to be bound to the query.

    - consolidate path-constant predicates to single enumerated predicate
      if an index exists that has an enumerated path term and predicates
      using the enumerated path  term can be combined into a single 
      predicate

          (each.firstName = 'Martin') | (each.lastName = 'Martin')

        becomes:

          (each.firstName|lastName = 'Martin')

        Note that some of the consolidation optimizations require an nsc and 
        any variables to be bound to the query.

  Original Formula
  ----------------

  The #optimize message may transform the query formula beyond recognition. If
  one wants to review and understand the optimizations performed, one must be
  able to view the original formula used to create the query.

  The GsQuery instance records the original formula and makes it available via
  the #originalFormula message. 

  When the original formula is recorded all of the bound state is removed
  (nsc, bound variable values, etc.) so that stale values are not kept alive.
  
  If one wants to create a new query from an original formula do the following:

    query := GsQuery 
      fromString: '(each.numberOfChildren < 4) & (2 < each.numberOfChildren)'.
    query 
      one: nsc;
      optimize.
    originalFormula := query originalFormula.
    originalQuery := GsQuery fromFormula: originalFormula.

  Query Execution
  ---------------

  The #execute message causes the query result to be calculated. Note that
  I have chosen not to use #select, because we are not using a block to 
  perform the query. Using #select would tend to imply that #reject and 
  #detect would be supported.

  Reject functionality can be achieved by forming the query using `not`:

    (each.firstName = 'Dale') not

  or by `negating` the query formula itself:

    query := GsQuery fromString: '(each.firstName = ''Dale'')'.
    negatedQuery := GsQuery fromFormula: query formula not. 
    rejectEquivalent := negatedQuery executeOn: nsc.

  Detect functionality can be achieved by using #do: or #do:for: and 
  exiting the block early:

    (GsQuery fromString: '(each.firstName = ''Dale'')')
      do: [:each | ^each]
      on: nsc

  where the #do:on: message is a shortcut for the following sequence:

    (GsQuery fromString: '(each.firstName = ''Dale'')')
      on: nsc;
      optimize;
      do: [:each | ^each]

  Detect:ifNone: functionality can be achieved by using #do:ifEmpty: or 
  #do:ifEmpty:for: as follows:

    (GsQuery fromString: '(each.firstName = ''Dale'')')
      do: [:each | ^each]
      ifEmpty: [self error: 'No elements matched the query' ]
      on: nsc

  Query Streams
  -------------

  To stream over the results of query one may use #readStream, 
  #readStreamOn:, #reversedReadStream, and #reversedReadStreamOn:. For
  example:

    stream := (GsQuery fromString: '(each.firstName = ''Dale'')')
      readStreamOn: nsc.
    [ stream atEnd ] whileFalse: [ 
	  element := stream next.
	  "..." ].

  #readStreamOn: is similar to #executeOn: in that it is a short cut for 
  the longer query form which includes explicit calls to #on:, #optimize 
  and variable binding:

    query := (GsQuery fromString: '(each.firstName = ''Dale'')')
      on: nsc;
      optimize.
    stream := query readStream.
    [ stream atEnd ] whileFalse: [ 
	  element := stream next.
	  "..." ].

  There are similarities between the #do:* and #*readStream* families of
  evaluation, but I have not yet determined what level of implementation 
  sharing there will be between them. 

  Invariance and Queries
  -------------

  All instances of GsQueryFormula and its subclasses created through the public
  API are invariant. By making the instances invariant, we are making it safe
  for query formulas to be persisted and shared without fear that side 
  effects of message sends may change the semantics of the query. 

  Given the following formula:
  
    (each.age > min) & (each.age < max)

  the optimized form of the query will vary depending upon the value `min` and
  `max`. If `min=4` and `max=9`:

    (GsQuery fromString: '(each.age > min) & (each.age < max)')
      bind: 'min' to: 4;
      bind: 'max' to: 9;
      on: nsc;
      optimize.

  The formula will be optimized to:

    (4 < each.age < 9)

  If the `min=9` and `max=4`:

    (GsQuery fromString: '(each.age > min) & (each.age < max)')
      bind: 'min' to: 9;
      bind: 'max' to: 4;
      on: nsc;
      optimize.

  The formula will be optimized to:

    (false)

  as there are no values of `each.age` that can satisfy the query.

  It is important to note that there are no plans to allow the effects of
  optimizations to be reversed.

  Consequently the form of the formula depends upon which part of the
  life cycle the formula is accessed. The fact that all formulas are 
  invariant simply means that the following sequence of operations are 
  safe:

    query := GsQuery fromString: '(each.age > min) & (each.age < max)'.
    savedFormula := query formula.
    query
      bind: 'min' to: 9;
      bind: 'max' to: 4;
      on: nsc;
      optimize.
    newQuery := GsQuery fromFormula: savedFormula.
    newQuery
      bind: 'min' to: 4;
      bind: 'max' to: 9;
      on: nsc;
      optimize.
    anotherFormula := newQuery formula.
    anotherQuery := anotherFormula asQuery
    anotherQuery
      bind: 'min' to: 3;
      bind: 'max' to: 30;
      on: nsc;
      optimize.
    finalQuery := anotherFormula asQuery
    finalQuery
      bind: 'min' to: 30;
      bind: 'max' to: 3;
      on: nsc;
      optimize.

  Instances of GsQuery are not normally invariant. If one wants to share 
  a query, use the #immediateInvariant message.

  Backwards compatibility with SelectBlock-based queries.
  -------------

  One may transition to using the GsQuery api while continuing to use 
  SelectBlocks. For example the following four statements:

    | min max |
    min := 6.
    max := 55.
    nsc select: {:each | (each.age > min) & (each.age < max)}.
    
    (GsQuery 
      fromSelectBlock: {:each | (each.age > min) & (each.age < max)})
        executeOn: nsc.

    (GsQuery 
      fromSelectBlock: {:each | (each.age > min) & (each.age < max)}
      on: nsc) execute.

    (GsQuery fromString: '(each.age > min) & (each.age < max)')
      bind: 'min' to: min;
      bind: 'max' to: max;
      executeOn: nsc.

  produce exactly the same results. 

  Given the mechanism used to extract the query formula from a SelectBlock, 
  it is not possible to alter the variable bindings after the fact as it 
  would be using a query statement. So the following does not work:

    (GsQuery 
      fromSelectBlock: {:each | (each.age > min) & (each.age < max)})
        bind: 'min' to: 3;
        bind: 'max' to: 9;
        on: nsc;
        optimize;
        execute.

  There are no plans to deprecate the current SelectBlock-based query API 
  (#select:, #detect:, #reject: etc.).
  
Set-valued Path Term
------------------------

  When the indexing code was ported to the 64-bit server, the support for 
  Set-valued path terms was not carried forward. Over time it has become clear
  that allowing index paths to include collections is a desirable feature, so
  we will add support for Set-valued path terms in version 3.2.

  An asterisk in the path term of a selection block predicate indicates that a
  collection is expected at that point in the path:

    GsIndexSpec new
      equalityIndex: 'each.children.*.age' lastElementClass: SmallInteger;
      createIndexesOn: myEmployees.
    (GsQuery fromString: 'each.children.*.age <= 18')
      executeOn: myEmployees.

  The select block sytax will be extended to allow '*' in path terms in order
  to maintain compatibility with existing 32 bit usage:

    myEmployees select: {:each | each.children.*.age <= 18 }

  The query will examine all elements of collection `children`.  In the 
  32-bit server, the collection path terms were restricted to instances of 
  UnorderedCollection. For the 64-bit implementation we will consider defining
  a set of SAFE collections. Right now, UnorderedCollection is the only member
  of the SAFE collection set.

  An asterisk my be used in any position in the path.

  If an asterisk is present in the path term when an index is created, changes
  to the underlying collection will be tracked and the index objects will be
  automatically updated.

Enumerated Path Term
------------------------

  An Enumerated Path Term is a list of instance variable names.

  The list of instance variables are specified as a `|` delimited list of 
  instance variable names:

    GsIndexSpec new
      equalityIndex: 'each.firstName|lastName' lastElementClass: String;
      createIndexesOn: myEmployees.
    (GsQuery fromString: 'each.firstName|lastName = name')
      bind: 'name' to: 'Allen';
      executeOn: myEmployees.

  The value of each instance variable listed in the path term will be 
  considered in the query. Changes to either of the instance variables will
  be tracked and the index objects will be automatically updated.

Selector Path Term
------------------------

  As another specialization of a Named Path Term (standard PathTerm class), if a
  Path Term is qualified with the `selector` keyword, the the path term is used
  as a selector and the result of the message send is to be traversed by the 
  query. The `selector` keyword is denoted by a leading `#` character in the path
  term:

    GsIndexSpec new
      equalityIndex: 'each.#car.color' lastElementClass: String;
      createIndexesOn: myEmployees.
    (GsQuery fromString: 'each.#car.color = color')
      bind: 'color' to: 'blue';
      executeOn: myEmployees.

  The query will send the message `car` to each element of `myEmployees` and then 
  access the `color` instance variable of the result.

  We cannot automatically maintain dependendencies and update indexes as the 
  elements at that location change, but a user can use the modification tracking 
  api to do this. 

  The `selector` qualifier may be used with any named path term position.

Heterogeneous Collections
------------------------

  The new indexing API supports queries and indexes on heterogenous collections. A
  heterogenous collection is a collection in which not all members of the collection
  share the same instance variable structure as defined by the path elements in a 
  query or the path terms in an index specification. 

  In earlier versions of the product, when executing a query on a heterogeneous 
  collection, building an index on a heterogeneous collection or adding a 
  heterongeneous object to homogeneous collection; an #rtErrObjectInvalidOffset 
  error was unconditionally signalled upon encountering an instance without the
  expected named instance variable.

  In 3.2, an #rtErrObjectInvalidOffset error will still be signalled when using the 
  old indexing API for index creation. However, when using the new API the default 
  is to permit indexes on heterogenous collections.

  The #requireAllPathTerms message may be used to enforce the restriction that all 
  queried instances are homogenous with respect to the path terms. Index creation 
  using the #requirePathTerms: keyword may be used to specify that only particular 
  instance variable paths should be homogenous. When a path is specified as 
  requiring path terms, all pathterm on the path are required.

  Here are examples for creating indexes, controlling for the presence of 
  heterogeneous elements in the collection:
 
    GsIndexSpec new
      requireAllPathTerms;
      equalityIndex: 'each.age' lastElementClass: SmallInteger;
      equalityIndex: 'each.father.middleName' lastElementClass: String;
	   createIndexesOn: nsc.

    GsIndexSpec new
      equalityIndex: 'each.age'
        lastElementClass: SmallInteger
        requirePathTerms: false;
      equalityIndex: 'each.father.middleName' 
        lastElementClass: String
        requirePathTerms: true;
      identityIndex: 'each.father' 
         requirePathTerms: true;
	createIndexesOn: nsc.

  Note that in that case where a required path term is a prefix of a
  heterogeneous path, the required path will be applied to both indexes:

    GsIndexSpec new
      equalityIndex: 'each.father.middleName' 
        lastElementClass: String
        requirePathTerms: false;
      identityIndex: 'each.father' 
         requirePathTerms: true;
	   createIndexesOn: nsc.

  In the case above the 'father' instance variable is required and the 
  'middleName' instance variable is optional.

  On the other hand, if a required path term wholly encompasses a 
  heterogeneous path, an error will be signalled. The following is an
  example of this case:

   GsIndexSpec new
      equalityIndex: 'each.father.middleName' 
        lastElementClass: String
        requirePathTerms: true;
      identityIndex: 'each.father' 
         requirePathTerms: false;
      createIndexesOn: nsc.


DateTime and DateAndTime
------------------------

  In both the 32-bit and 64-bit servers, indexes created with a Last Element 
  Class of DateTime or DateAndTime do not use encryption values, thus query
  operations on instance of the two classes are not as efficient as they 
  could be.

  Martin suggests that both DateTime and DateAndTime should be encrypted by 
  converting the date and time information into signed UTC microseconds since 
  an epoch. The second encryption word with a full SmallInteger range will be 
  used to store the microseconds value. 

  For DateTime, UTC microseconds represents the exact value of the `seconds`
  instance variable, since the resolution for DateTime is in milliseconds.

  The DateAndTime class can use different Number instances to get different
  levles of resolution (i.e., ScaledDecimal, SmallDouble or Integer) so 
  microseconds may not provide an exact representation.  Therefore the first 
  encrcryption word will have a handful of bytes allocated to indicate whether 
  or not the signed microseconds represents an exact match or is within a 
  microsecond of the exact value.

Unicode String Indexes
------------------------

  In 3.1 we added support for Unicode strings, but deferred indexing support
  until a later date ... that date has arrived.

  Unicode string methods take a Unicode collator object (derived from a 
  Locale) to perform primitive string comparison operations. To create an index
  that uses a Unicode collator the following methods will be used:

    GsIndexSpec new
      unicodeIndex: 'each.#car.color' 
        collator: IcuCollator default;
      rcUnicodeIndex: 'each.firstName' 
        collator: (IcuCollator forLocaleNamed: 'en_GB')
        requireUnicodeStrings: true;
      createIndexesOn: myEmployees.

  The Unicode collator instance will be made invariant and attached to the 
  index metadata. 

  Unicode indexes have an implicit lastElementClass of CharacterCollection.
  If requireUnicodeStrings: true, then the lastElements must be instance of
  Unicode string classes: Unicode7, Unicode16, etc.

  It is disallowed to create two Unicode indexes on the same path. Creating
  a unicode and an equality index on the same path is not explicitly disallowed, 
  but since Unicode strings are disallowed in non-unicode equality indexes, 
  the only way this can succeed is when the index elements are all Strings.

  When a collator is specified while creating a query on a path term upon
  which an index has been created:

    (GsQuery fromString: 'each.firstName = name')
      bind: 'name' to: 'Allen';
      on: myEmployees collator: (IcuCollator forLocaleNamed: 'en_GB');
      execute.

  and the collator for the index is #= to the collator specified in the 
  query, then the index will be used to satisfy the query. Otherwise the 
  collator specified in the query will be used for brute force evaluation.

  If no collator is specified for the query, then the collator associated
  with the index is used to satisfy the query.  For example, given the
  index created in the above example using IcuCollator default, whatever 
  the default was at the time of index creation, that would be used for 
  the following query:

    (GsQuery fromString: 'each.#car.color = color')
      bind: 'color' to: 'blue';
      executeOn: myEmployees.

  For a given Unicode string and a given Unicode collator, a Unicode sort
  key can be produced. The bytes of the sort key are created such that two
  sort keys can compared on a byte-wise basis, exactly what is needed for
  the btree encryption values.

Concurrent Parallel Index Creation
------------------------

  In 2.x we introduced UnorderedCollection>>createParallelIndexes: which allows
  one to create a number of indexes on a single collection while making a 
  single pass through the the elements of the collection. 

  Norm has suggested that it would be very useful to spread the index creation
  work across multiple gems. Doing so would only be safe if we can avoid
  conflicts while updating the structures for each index (the initial creation
  and final updates are already isolated by the 
  UnorderedCollection>>createParallelIndexes: code).

  Of the index data structures that are created and modified on a per index
  basis during index creation, only the indexDictionary is shared amongst the 
  various indexes (i.e., each equality index has it's own BtreeNode structure).
  Fortunately, indexDictionary is an RcIndexDictionary, so concurrent updates 
  should be tolerated. 

  There are three phases of parallel index creation:

    - create index structures
    - traverse elements and add index meta data
    - finalize index structures and update nsc

  The first and third phases need to be run in a single session while the index
  building can be run concurrently. Here is some sample code illustrating the 
  proposed api:

    | nsc gem1Spec gem2Spec |
    nsc := Set new.
    gem1Spec := GsIndexSpec new
      equalityIndex: 'each.age' lastElementClass: SmallInteger;
      yourself.
    gem2Spec := GsIndexSpec new
      equalityIndex: 'each.lastName' lastElementClass: String;
      yourself.
    nsc createConcurrentIndexes: gem1Spec, gem2Spec.
    nsc buildConcurrentIndexes: gem1Spec.
    nsc buildConcurrentIndexes: gem2Spec.
    nsc finalizeConcurrentIndexes: gem1Spec, gem2Spec.

  The #buildConcurrentIndexes: would be run in separate concurrent sessions.

  Note: we need to find a way to track index creation progress.

Wildcard String Query

  Rather than add additional features to the product at this time, we will 
  instead publish a set of examples documenting the different way that the
  existing facilities within the image can be used in support of string 
  queries. Examples will include (but not limited to):

    - wildcard string queries: ?xyz, ?xyz*, xyz*
    - examples of data structures to facilitate word-based queries (i.e., 
      return all documents that contain the word `filetree`)

-------------------------------------------------------------------------------
APPENDIX
-------------------------------------------------------------------------------

64-bit Server Encryption/Decryption

  14 bytes of encryption, 7 bytes in word0 and 7 bytes in word1. The eighth 
  byte in word0 has 5 bits (signed) reserved for type information. There are 5
  bits that are currently unused in word1.

  The RelCachedValueEType value is offset by -8 to fit in the 5 bit signed 
  integer. 18 types have already been declared (from relops.ht):

  typedef enum {
    REL_UNDEFINED_CACHE,
    REL_SYM_CACHE,
    REL_STR_CACHE,
    REL_DB_SYM_CACHE,  /* DoubleByteSymbol */
    REL_DB_STR_CACHE,  /* DoubleByteString */
    REL_Quad_STR_CACHE,  // QuadByteString
    REL_Quad_SYM_CACHE,  // future QuadByteSymbol
    REL_BOOLEAN_CACHE,
    REL_CHR_CACHE,
    REL_TIME_CACHE,
    REL_DATE_CACHE, 
    REL_SMALL_INT_CACHE,
    REL_LRG_INT_CACHE,
    REL_ScaledDecimal_CACHE,  /* Gs64 v3.0 ScaledDecimal */
    // REL_SCALED_DECIMAL_CACHE was not used, same as REL_FRACTION_CACHE,
    REL_FRACTION_CACHE,
    REL_SMALL_DBL_CACHE,   /* SmallDouble */
    REL_FLOAT_CACHE,   /* Float, SmallFloat all encrypted as doubles */
    REL_DECIMAL_FLOAT_CACHE    /* DecimalFloat */
    } RelCachedValueEType;

------------------------
NOTES
------------------------

Spec Review Comments (Thursday January 17, 2013)
------------------------

  1. Useful to know if a particular {} block would leverage existing indeses or
     just end up doing a linear scan. Perhaps #selectIndexed: would throw an
     error if no index were used.

  2. Alternatives to my suggested PathTerm syntax additions were offered up and
     deserve more attention.

  3. For Selector Path Term, it was suggested that we may want to introduce a
     flag in the vm that would allow a developer to detect whether or not a
     particular message would cause unintended side effects. The issue being
     that a message used in a selector path term SHOULD NOT have any side
     effects when executed.

  4. It was suggested that we allow indexing on instances of UTF8.

  5. It was suggested that the Ernie ExternalSession support be moved into the
     base in order to provide a standard mechanism for doing parallel index
     creation.

  6. It was suggested that Progress of Index Reporting be made to be consistent
     and correct.

  7. It was suggested that NamedPathTerm be called AbstractNamedPathTerm.

  8. It was suggested to clarify that the negative `id` discussed in the
     dependency list entries should be specified as an explicit `-1`.

PathTerm Spec Review (Wednesday February 6, 2013)
------------------------

  This meeting was held to discuss alternatives that were suggested by
  Martin[1] and reviewed by Dale and Richard[2].

  [1] martinsStrawManPathTermSyntax.txt
  [2] daleAndRichardsStrawManPathTermSyntax.txt

Indexed Path Term

  During the discussion related to the syntax for Indexed Path Terms, it was
  decided that the use case for supporting Indexed Path Terms was marginal at
  best. As a consequence we are recommending that Indexed Path Terms be dropped
  from the specification.

Collection-Valued Path Term

  It was decided that if we are to allow the use of the indexable fields in an
  object for Collection-Valued Path Terms, then we need to restrict their use
  to SAFE collection classes and NSCs. Examples of SAFE collections are Array
  and OrderedCollection. UNSAFE collections include Dictionary and RcQueue.

Query Block, Query API & Optional path terms

  It was decided to construct indexes and queries for Enumerated, Optional, and
  Selector Path Terms using a Smalltalk API rather than Path Term syntax.

  To support existing 32-bit and 64-bit index creation and queries we will
  support the old-style path terms and Query Block syntax:

    a.b.c
    a.*.c

  The API will be expanded to cover optional Named Path Terms and Unicode index
  creation.

Enumerated Path Term

  Enumerated Path Terms will be restricted to named variables only.

Open Questions

  1. Is an error signalled by a query using a named path term on an object with
     no instance variable with the desired name?

  2. Are Set and Bag considered to be NSCs in that they can be the target of an
     index even though their implementation is vastly different from
     IdentityBag and friends?

Query and Index Creation APIs defined (August 2, 2013)
------------------------

  Between February 10 and the present, a fair amount of work has been done in 
  defining and implenting the Query and Index Creation APIs. 
